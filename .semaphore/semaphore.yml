version: v1.0
name: Main pipeline
agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu1804

blocks:
  - name: Git tag
    task:
      secrets:
        - name: git-keys
      prologue:
        commands:
          # Install git keys
          - mkdir -p ~/.ssh
          - chmod 0700 ~/.ssh
          - echo "$GIT_PUBKEY" > ~/.ssh/git.pub
          - echo "$GIT_PRIVKEY" > ~/.ssh/git
          - chmod 0600 ~/.ssh/git{,.pub}
          - export GIT_SSH_COMMAND="ssh -i $HOME/.ssh/git"
          - git config --global user.name 'Build robot'
          - git config --global user.email 'der.roboter@localhost.localdomain'
          # Clone repository
          - checkout
      jobs:
        - name: Latest
          commands:
            # Update git tag
            - if test "$SEMAPHORE_GIT_BRANCH" = master; then
              	git tag -f -a latest -m "Latest [ci skip]";
              	git push -f origin latest;
              fi
  - name: Build
    task:
      env_vars:
        - name: APP_ENV
          value: prod
        - name: GITHUB_USER
          value: jpcima
        - name: GITHUB_REPO
          value: ADLplug
      secrets:
        - name: github-release-token
      prologue:
        commands:
          # Clone repository with submodules
          - checkout
          - git submodule update --init
          # Patch JUCE
          - patch -d thirdparty/JUCE -p1 -i "$(pwd)"/resources/patch/juce-enable-mingw-vst3.patch
          - patch -d thirdparty/JUCE -p1 -i "$(pwd)"/resources/patch/juce-enable-mingw-directwrite.patch
          # Unpack ASIO SDK
          - cache restore asiosdk2.3.zip
          - if test "$(sha1sum -b asiosdk2.3.zip | cut -d ' ' -f 1)" != 8a2305ed5ab4c72ac977e7ac2daa26b787005971; then
            	curl -o asiosdk2.3.zip http://jpcima.sdf1.org/files/asiosdk2.3.zip;
            	test "$(sha1sum -b asiosdk2.3.zip | cut -d ' ' -f 1)" = 8a2305ed5ab4c72ac977e7ac2daa26b787005971;
            	cache delete asiosdk2.3.zip;
            	cache store asiosdk2.3.zip asiosdk2.3.zip;
            fi
          - unzip -d thirdparty asiosdk2.3.zip
          - rm -f asiosdk2.3.zip
          # Unpack VST2 SDK
          - cache restore vst_sdk2_4_rev2.zip
          - if test "$(sha1sum -b vst_sdk2_4_rev2.zip | cut -d ' ' -f 1)" != d7f3668c90a69dbe640f2eeed6fc0a7e0717adff; then
            	curl -o vst_sdk2_4_rev2.zip http://jpcima.sdf1.org/files/vst_sdk2_4_rev2.zip;
            	test "$(sha1sum -b vst_sdk2_4_rev2.zip | cut -d ' ' -f 1)" = d7f3668c90a69dbe640f2eeed6fc0a7e0717adff;
            	cache delete vst_sdk2_4_rev2.zip;
            	cache store vst_sdk2_4_rev2.zip vst_sdk2_4_rev2.zip;
            fi
          - unzip -d thirdparty vst_sdk2_4_rev2.zip
          - rm -f vst_sdk2_4_rev2.zip
          # Install gothub
          - cache restore gothub-0.7.0-bin.xz
          - if test "$(sha1sum -b gothub-0.7.0-bin.xz | cut -d ' ' -f 1)" != 19d226667404ac313c011fe7934a86b1efe0f04a; then
            	curl -o gothub-0.7.0-bin.xz http://jpcima.sdf1.org/files/gothub-0.7.0-bin.xz;
            	test "$(sha1sum -b gothub-0.7.0-bin.xz | cut -d ' ' -f 1)" = 19d226667404ac313c011fe7934a86b1efe0f04a;
            	cache delete gothub-0.7.0-bin.xz;
            	cache store gothub-0.7.0-bin.xz gothub-0.7.0-bin.xz;
            fi
          - mkdir -p "$HOME"/gothub/bin
          - xzcat gothub-0.7.0-bin.xz > "$HOME"/gothub/bin/gothub
          - rm -f gothub-0.7.0-bin.xz
          - chmod 0755 "$HOME"/gothub/bin/gothub
          - export PATH="$HOME"/gothub/bin:"$PATH"
          # Install dependencies
          - install-package -u p7zip
      jobs:
        - name: MinGW32 build
          commands:
            - docker pull jpcima/mingw
            - container=$(docker run -d -i -t -v /home:/home jpcima/mingw /bin/bash)
            - alias cross='docker exec -w "$(pwd)" -i -t "$container"'
            - for chip in OPL3 OPN2; do
              	case "$chip" in OPL3) program=ADLplug;; OPN2) program=OPNplug;; *) false;; esac;
              	mkdir "$program"-dev-win32;
              	cd "$program"-dev-win32;
              	cross mingw32-cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DADLplug_CHIP="$chip" -DADLplug_PCH=ON -DADLplug_LV2=ON ..;
              	cross make -j2;
              	cd ..;
              done
            - for program in ADLplug OPNplug; do
              	7zr a "$program"-dev-win32.7z "$program"-dev-win32/{lv2,vst2,vst3,standalone};
              	if test "$SEMAPHORE_GIT_BRANCH" = master; then
              		gothub upload -t latest -n "$program"-dev-win32.7z -l "$program for 32-bit Windows - rev ${SEMAPHORE_GIT_SHA:0:7} $(date -u -I)" -f "$program"-dev-win32.7z -R;
              	fi;
              done
        - name: MinGW64 build
          commands:
            - docker pull jpcima/mingw
            - container=$(docker run -d -i -t -v /home:/home jpcima/mingw /bin/bash)
            - alias cross='docker exec -w "$(pwd)" -i -t "$container"'
            - for chip in OPL3 OPN2; do
              	case "$chip" in OPL3) program=ADLplug;; OPN2) program=OPNplug;; *) false;; esac;
              	mkdir "$program"-dev-win64;
              	cd "$program"-dev-win64;
              	cross mingw64-cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DADLplug_CHIP="$chip" -DADLplug_PCH=ON -DADLplug_LV2=ON ..;
              	cross make -j2;
              	cd ..;
              done
            - for program in ADLplug OPNplug; do
              	7zr a "$program"-dev-win64.7z "$program"-dev-win64/{lv2,vst2,vst3,standalone};
              	if test "$SEMAPHORE_GIT_BRANCH" = master; then
              		gothub upload -t latest -n "$program"-dev-win64.7z -l "$program for 64-bit Windows - rev ${SEMAPHORE_GIT_SHA:0:7} $(date -u -I)" -f "$program"-dev-win64.7z -R;
              	fi;
              done
        - name: Mac build
          env_vars:
            - name: container_PATH
              value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/osxcross/target/bin
          commands:
            - docker pull jpcima/osxcross
            - container=$(docker run -d -i -t -v /home:/home jpcima/osxcross /bin/bash)
            - alias cross='docker exec -w "$(pwd)" -e PATH="$container_PATH" -i -t "$container"'
            - for chip in OPL3 OPN2; do
              	case "$chip" in OPL3) program=ADLplug;; OPN2) program=OPNplug;; *) false;; esac;
              	mkdir "$program"-dev-mac;
              	cd "$program"-dev-mac;
              	cross x86_64-apple-darwin15-cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES="x86_64;i386" -DADLplug_CHIP="$chip" -DADLplug_LV2=ON ..;
              	cross make -j2;
              	cd ..;
              done
            - for program in ADLplug OPNplug; do
              	7zr a "$program"-dev-mac.7z "$program"-dev-mac/{lv2,vst2,vst3,standalone};
              	if test "$SEMAPHORE_GIT_BRANCH" = master; then
              		gothub upload -t latest -n "$program"-dev-mac.7z -l "$program for macOS - rev ${SEMAPHORE_GIT_SHA:0:7} $(date -u -I)" -f "$program"-dev-mac.7z -R;
              	fi;
              done
        - name: LibraZiK-2 build
          commands:
            # Build using VeSTige
            - rm -rf thirdparty/vstsdk2.4
            - docker pull jpcima/librazik
            - container=$(docker run -d -i -t -v /home:/home jpcima/librazik /bin/bash)
            - alias cross='docker exec -w "$(pwd)" -i -t "$container"'
            - for chip in OPL3 OPN2; do
              	case "$chip" in OPL3) program=ADLplug;; OPN2) program=OPNplug;; *) false;; esac;
              	mkdir "$program"-dev-lzk;
              	cd "$program"-dev-lzk;
              	cross cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DADLplug_CHIP="$chip" -DADLplug_PCH=ON ..;
              	cross make -j2;
              	cd ..;
              done
            - for program in ADLplug OPNplug; do
              	cd "$program"-dev-lzk;
              	cross cpack -G DEB;
              	lower_program=$(echo -n "$program" | tr '[:upper:]' '[:lower:]');
              	if test "$SEMAPHORE_GIT_BRANCH" = master; then
              		gothub upload -t latest -n "$lower_program"_amd64.deb -l "$program for 64-bit LibraZiK-2 / Debian Stretch - rev ${SEMAPHORE_GIT_SHA:0:7} $(date -u -I)" -f "$lower_program"_amd64.deb -R;
              	fi;
              	cd ..;
              done
        - name: Source code build
          commands:
            - rm -rf thirdparty/ASIOSDK2.3
            - rm -rf thirdparty/vstsdk2.4
            - rm -rf thirdparty/JUCE/{doxygen,examples,extras}
            - rm -rf thirdparty/fmt/doc
            - rm -rf thirdparty/{libADLMIDI,libOPNMIDI}/fm_banks
            - rm -rf thirdparty/libADLMIDI/projects
            - rm -rf .semaphore
            - find . -name '.git*' -exec rm -rf {} +
            - cd ..
            - mv "$SEMAPHORE_GIT_DIR" ADLplug-dev
            - tar cJvf ADLplug-dev.tar.xz ADLplug-dev
            - gothub upload -t latest -n ADLplug-dev.tar.xz -l "ADLplug & OPNplug source code - rev ${SEMAPHORE_GIT_SHA:0:7} $(date -u -I)" -f ADLplug-dev.tar.xz -R;
